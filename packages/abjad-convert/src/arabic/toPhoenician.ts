import { Ar } from './letters'
import { Ph } from '../phoenician/letters'
import { IConvert } from '../IConvert';
import { Abjad } from '../types';

export class ArabicToPhoenicianConverter implements IConvert {
	public readonly from = Abjad.Arabic;
	public readonly to = Abjad.Phoenician;

	private map = new Map<string, string>(
		[
			[' ', Ph.WordSeparator],
			[Ar.Hamza, ''],
			[Ar.AlefMadda, Ph.Alep], // ê§Ä <- ÿ¢
			[Ar.AlefHamza, Ph.Alep], // ê§Ä <- ÿß
			[Ar.WawHamza, Ph.Waw], // ê§Ö <- ÿ§
			[Ar.AlefHamzaMaksura, Ph.Alep], // ê§Ä <- Ÿâ
			[Ar.Alef, Ph.Alep], // ê§Ä <- ÿß
			[Ar.Ba, Ph.Bet], // ê§Å <- ÿ®
			[Ar.TaMarbuta, Ph.Tau], // ê§ï <- ÿ©
			[Ar.Ta, Ph.Tau], // ê§ï <- ÿ™
			[Ar.Tha, Ph.Tau], // ê§ï <- ÿ´
			[Ar.Jeem, Ph.Gimi], // ê§Ç <- ÿ¨
			[Ar.H7aa, Ph.Het], // ê§á <- ÿ≠
			[Ar.Khaa, Ph.Het], // ê§á <- ÿÆ
			[Ar.Dal, Ph.Dalet], // ê§É <- ÿØ
			[Ar.Thal, Ph.Dalet], // ê§É <- ÿ∞
			[Ar.Ra, Ph.Ros], // ê§ì <- ÿ±
			[Ar.Zay, Ph.Zayin], // ê§Ü <- ÿ≤
			[Ar.Seen, Ph.Semk], // ê§é <- ÿ≥
			[Ar.Sheen, Ph.Shin], // ê§î <- ÿ¥
			[Ar.Sad, Ph.Sade], // ê§ë <- ÿµ
			[Ar.Dad, Ph.Dalet], // ê§É <- ÿ∂
			[Ar.TTa, Ph.Tet], // ê§à <- ÿ∑
			[Ar.THa, Ph.Tau], // ê§ï <- ÿ∏
			[Ar.Ayn, Ph.Ain], // ê§è <- ÿπ
			[Ar.Ghayn, Ph.Ain], // ê§è <- ÿ∫
			[Ar.Fa, Ph.Pe], // ê§ê <- ŸÅ
			[Ar.Qaf, Ph.Qof], // ê§í <- ŸÇ
			[Ar.Kaf, Ph.Kap], // ê§ä <- ŸÉ
			[Ar.Lam, Ph.Lam], // ê§ã <	- ŸÑ
			[Ar.Meem, Ph.Mem], // ê§å <- ŸÖ
			[Ar.Noon, Ph.Nun], // ê§ç <- ŸÜ
			[Ar.Ha, Ph.He], // ê§Ñ <- Ÿá
			[Ar.Waw, Ph.Waw], // ê§Ö <- Ÿà
			[Ar.Yaa, Ph.Yod], // ê§â <- Ÿä
			[Ar.AlefMaksura, Ph.Alep], // ê§Ä <- Ÿâ
		]
	);

	public convert(text: string): string {
		let result = '';
		for (const letter of text) {
			const u = this.map.get(letter) ?? ''
			result += u
		}
		return result
	}
}
