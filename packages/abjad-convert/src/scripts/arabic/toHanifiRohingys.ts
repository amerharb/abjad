import { Ar } from './letters'
import { HR } from '../hanifiRohingya/letters'
import { DirectConverter } from '../../DirectConverter'
import { Abjad } from '../../types'

export class ArabicToHanifiRohingyaConverter extends DirectConverter {
	public readonly from = Abjad.Arabic
	public readonly to = Abjad.HanifiRohingya

	private map = new Map<string, string>(
		[
			[' ', ' '],
			[Ar.Hamza, HR.A], //
			[Ar.AlefMadda, HR.A], // ÿ¢ -> ê¥Ä
			[Ar.AlefHamza, HR.A], // ÿ£ -> ê¥Ä
			[Ar.WawHamza, HR.Wa], // ÿ§ -> ê¥ñ
			[Ar.AlefHamzaMaksura, HR.Ya], // Ÿâ -> ê¥ò
			[Ar.Alef, HR.A], // ÿß -> ê¥Ä
			[Ar.Ba, HR.Ba], // ÿ® -> ê¥Å
			[Ar.TaMarbuta, HR.Ta], // ÿ© -> ê¥É
			[Ar.Ta, HR.Ta], // ÿ™ -> ê¥É
			[Ar.Tha, HR.Tta], // ÿ´ -> ê¥Ñ
			[Ar.Jeem, HR.Ja], // ÿ¨ -> ê¥Ö
			[Ar.H7aa, HR.Ha], // ÿ≠ -> ê¥á
			[Ar.Khaa, HR.Kha], // ÿÆ -> ê¥à
			[Ar.Dal, HR.Da], // ÿØ -> ê¥ä
			[Ar.Thal, HR.Za], // ÿ∞ -> ê¥é
			[Ar.Ra, HR.Ra], // ÿ± -> ê¥å
			[Ar.Zay, HR.Za], // ÿ≤ -> ê¥é
			[Ar.Seen, HR.Sa], // ÿ≥ -> ê¥è
			[Ar.Sheen, HR.Sha], // ÿ¥ -> ê¥ê
			[Ar.Sad, HR.Sa], // ÿµ -> ê¥è
			[Ar.Dad, HR.Da], // ÿ∂ -> ê¥ä
			[Ar.TTa, HR.Tta], // ÿ∑ -> ê¥É
			[Ar.THa, HR.Za], // ÿ∏ -> ê¥é
			[Ar.Ayn, HR.A], // ÿπ -> ê¥Ä
			[Ar.Ghayn, HR.Ga], // ÿ∫ -> ê¥í
			[Ar.Fa, HR.Fa], // ŸÅ -> ê¥â
			[Ar.Qaf, HR.Ka], // ŸÇ -> ê¥ë
			[Ar.Kaf, HR.Ka], // ŸÉ -> ê¥ë
			[Ar.Lam, HR.La], // ŸÑ -> ê¥ì
			[Ar.Meem, HR.Ma], // ŸÖ -> ê¥î
			[Ar.Noon, HR.Na], // ŸÜ -> ê¥ï
			[Ar.Ha, HR.Ha], // Ÿá -> ê¥á
			[Ar.Waw, HR.Wa], // Ÿà -> ê¥ñ
			[Ar.Yaa, HR.Ya], // Ÿä -> ê¥ò
			[Ar.AlefMaksura, HR.Ya], // Ÿâ -> ê¥ò

			['0', HR.DigitZero], // 0 -> ê¥∞
			['1', HR.DigitOne], // 1 -> ê¥±
			['2', HR.DigitTwo], // 2 -> ê¥≤
			['3', HR.DigitThree], // 3 -> ê¥≥
			['4', HR.DigitFour], // 4 -> ê¥¥
			['5', HR.DigitFive], // 5 -> ê¥µ
			['6', HR.DigitSix], // 6 -> ê¥∂
			['7', HR.DigitSeven], // 7 -> ê¥∑
			['8', HR.DigitEight], // 8 -> ê¥∏
			['9', HR.DigitNine], // 9 -> ê¥π
		]
	)

	public convert(text: string): string {
		let result = ''
		for (const letter of text) {
			const u = this.map.get(letter) ?? ''
			result += u
		}
		return result
	}
}
