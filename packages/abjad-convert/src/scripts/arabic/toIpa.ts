import { Ar } from './letters'
import { IPA } from '../ipa/letters'
import { IConverter } from '../../IConverter'
import { Abjad } from '../../types'

export class ArabicToIpaConverter implements IConverter {
	public readonly from = Abjad.Arabic
	public readonly to = Abjad.IPA

	private map = new Map<string, string>(
		[
			[' ', ' '],
			[Ar.Hamza, IPA. î], /** ÿ° ->  î */
			[Ar.AlefMadda, IPA. î + IPA.a + IPA.Àê], /** ÿ¢ ->  îaÀê */
			[Ar.AlefHamza, IPA. î + IPA.a], /**  îa <- ÿ£ */
			[Ar.WawHamza, IPA. î + IPA.u + IPA.Àê], /**  îÀêu <- ÿ§ */
			[Ar.AlefHamzaMaksura, IPA. î + IPA.j], /**  îj <- ÿ• */
			[Ar.Alef, IPA.a + IPA.Àê], /** aÀê <- ÿß */
			[Ar.Ba, IPA.b], /** b <- ÿ® */
			[Ar.TaMarbuta, IPA.h], /** h <- ÿ© */
			[Ar.Ta, IPA.t], /** t <- ÿ™ */
			[Ar.Tha, IPA.Œ∏], /** Œ∏ <- ÿ´ */
			[Ar.Jeem, IPA. í], /**  í <- ÿ¨ */
			[Ar.H7aa, IPA.ƒß], /** ƒß <- ÿ≠ */
			[Ar.Khaa, IPA.x], /** x <- ÿÆ */
			[Ar.Dal, IPA.d], /** d <- ÿØ */
			[Ar.Thal, IPA.√∞], /** √∞ <- ÿ∞ */
			[Ar.Ra, IPA.r], /** r <- ÿ± */
			[Ar.Zay, IPA.z], /** z <- ÿ≤ */
			[Ar.Seen, IPA.s], /** s <- ÿ≥ */
			[Ar.Sheen, IPA. É], /**  É <- ÿ¥ */

			// TODO: still need to replace √¶ and @
			// [Ar.Sad, IPA.√¶], /** @ <- ÿµ */
			// [Ar.Dad, IPA.√¶], /** @ <- ÿ∂ */
			// [Ar.TTa, IPA.√¶], /** @ <- ÿ∑ */
			// [Ar.THa, IPA.√¶], /** @ <- ÿ∏ */
			[Ar.Ayn, IPA. ï], /**  ï <- ÿπ */
			// [Ar.Ghayn, IPA.√¶], /** @ <- ÿ∫ */
			[Ar.Fa, IPA.f], /** f <- ŸÅ */
			[Ar.Qaf, IPA.q], /** q <- ŸÇ */
			// [Ar.Kaf, IPA.√¶], /** @ <- ŸÉ */
			// [Ar.Lam, IPA.√¶], // ê§ã <	- ŸÑ
			// [Ar.Meem, IPA.√¶], /** @ <- ŸÖ */
			// [Ar.Noon, IPA.√¶], /** @ <- ŸÜ */
			// [Ar.Ha, IPA.√¶], /** @ <- Ÿá */
			// [Ar.Waw, IPA.√¶], /** @ <- Ÿà */
			// [Ar.Yaa, IPA.√¶], /** @ <- Ÿä */
			// [Ar.AlefMaksura, IPA.√¶], /** @ <- Ÿâ */
		],
	)

	public convert(text: string): string {
		let result = ''
		for (const letter of text) {
			const u = this.map.get(letter) ?? ''
			result += u
		}
		return result
	}
}
