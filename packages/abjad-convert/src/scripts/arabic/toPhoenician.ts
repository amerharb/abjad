import { arabic } from './letters'
import { Ph } from '../phoenician/letters'
import { IConverter } from '../../IConverter'
import { Abjad } from '../../types'

export class ArabicToPhoenicianConverter implements IConverter {
	public readonly from = Abjad.Arabic
	public readonly to = Abjad.Phoenician

	private map = new Map<string, string>(
		[
			[' ', Ph.WordSeparator],
			[arabic.L.Hamza, ''],
			[arabic.L.AlefMadda, Ph.Alep], // ê§Ä <- ÿ¢
			[arabic.L.AlefHamza, Ph.Alep], // ê§Ä <- ÿß
			[arabic.L.WawHamza, Ph.Waw], // ê§Ö <- ÿ§
			[arabic.L.AlefHamzaMaksura, Ph.Alep], // ê§Ä <- Ÿâ
			[arabic.L.Alef, Ph.Alep], // ê§Ä <- ÿß
			[arabic.L.Ba, Ph.Bet], // ê§Å <- ÿ®
			[arabic.L.TaMarbuta, Ph.Tau], // ê§ï <- ÿ©
			[arabic.L.Ta, Ph.Tau], // ê§ï <- ÿ™
			[arabic.L.Tha, Ph.Tau], // ê§ï <- ÿ´
			[arabic.L.Jeem, Ph.Gimi], // ê§Ç <- ÿ¨
			[arabic.L.H7aa, Ph.Het], // ê§á <- ÿ≠
			[arabic.L.Khaa, Ph.Het], // ê§á <- ÿÆ
			[arabic.L.Dal, Ph.Dalet], // ê§É <- ÿØ
			[arabic.L.Thal, Ph.Dalet], // ê§É <- ÿ∞
			[arabic.L.Ra, Ph.Ros], // ê§ì <- ÿ±
			[arabic.L.Zay, Ph.Zayin], // ê§Ü <- ÿ≤
			[arabic.L.Seen, Ph.Semk], // ê§é <- ÿ≥
			[arabic.L.Sheen, Ph.Shin], // ê§î <- ÿ¥
			[arabic.L.Sad, Ph.Sade], // ê§ë <- ÿµ
			[arabic.L.Dad, Ph.Dalet], // ê§É <- ÿ∂
			[arabic.L.TTa, Ph.Tet], // ê§à <- ÿ∑
			[arabic.L.THa, Ph.Tau], // ê§ï <- ÿ∏
			[arabic.L.Ayn, Ph.Ain], // ê§è <- ÿπ
			[arabic.L.Ghayn, Ph.Ain], // ê§è <- ÿ∫
			[arabic.L.Fa, Ph.Pe], // ê§ê <- ŸÅ
			[arabic.L.Qaf, Ph.Qof], // ê§í <- ŸÇ
			[arabic.L.Kaf, Ph.Kap], // ê§ä <- ŸÉ
			[arabic.L.Lam, Ph.Lam], // ê§ã <	- ŸÑ
			[arabic.L.Meem, Ph.Mem], // ê§å <- ŸÖ
			[arabic.L.Noon, Ph.Nun], // ê§ç <- ŸÜ
			[arabic.L.Ha, Ph.He], // ê§Ñ <- Ÿá
			[arabic.L.Waw, Ph.Waw], // ê§Ö <- Ÿà
			[arabic.L.Yaa, Ph.Yod], // ê§â <- Ÿä
			[arabic.L.AlefMaksura, Ph.Alep], // ê§Ä <- Ÿâ
		]
	)

	public convert(text: string): string {
		let result = ''
		for (const letter of text) {
			const u = this.map.get(letter) ?? ''
			result += u
		}
		return result
	}
}
